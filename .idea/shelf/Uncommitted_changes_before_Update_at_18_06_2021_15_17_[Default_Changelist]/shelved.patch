Index: app/src/main/java/com/example/final_project_amit_and_gal/Face_Recognition.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.final_project_amit_and_gal;\r\n\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport android.content.Context;\r\nimport android.os.Bundle;\r\nimport android.util.Log;\r\nimport android.view.ContextMenu;\r\nimport android.view.SurfaceView;\r\n\r\nimport org.opencv.android.BaseLoaderCallback;\r\nimport org.opencv.android.CameraBridgeViewBase;\r\nimport org.opencv.android.JavaCameraView;\r\nimport org.opencv.android.OpenCVLoader;\r\nimport org.opencv.core.Core;\r\nimport org.opencv.core.CvType;\r\nimport org.opencv.core.Mat;\r\nimport org.opencv.core.MatOfRect;\r\nimport org.opencv.core.Point;\r\nimport org.opencv.core.Rect;\r\nimport org.opencv.core.Scalar;\r\nimport org.opencv.core.Size;\r\nimport org.opencv.imgproc.Imgproc;\r\nimport org.opencv.objdetect.CascadeClassifier;\r\nimport org.opencv.objdetect.Objdetect;\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\n\r\npublic class Face_Recognition extends AppCompatActivity implements CameraBridgeViewBase.CvCameraViewListener2 {\r\n\r\n    private static String TAG = \"MainActivity\";\r\n    CascadeClassifier face_detector;\r\n    JavaCameraView javaCameraView;\r\n    Mat mRGBA,mGREY;\r\n    File cascFile;\r\n    BaseLoaderCallback baseLoaderCallback = new BaseLoaderCallback(Face_Recognition.this) {\r\n        @Override\r\n        public void onManagerConnected(int status) throws IOException {\r\n            switch (status) {\r\n                case BaseLoaderCallback.SUCCESS: {\r\n                    InputStream is = getResources().openRawResource(R.raw.haarcascade_frontalface_alt2);\r\n                    File cascadeDir = getDir(\"cascade\", Context.MODE_PRIVATE);\r\n                    cascFile= new File(cascadeDir,\"haarcascade_frontalface_alt2.xml\");\r\n                    FileOutputStream fos = new FileOutputStream(cascFile);\r\n                    byte[] buffer = new byte[4096];\r\n                    int byteRead;\r\n                    while ((byteRead = is.read(buffer)) !=-1 ){\r\n                        fos.write(buffer,0,byteRead);\r\n                    }\r\n                    is.close();\r\n                    fos.close();\r\n\r\n                    face_detector = new CascadeClassifier(cascFile.getAbsolutePath());\r\n                    if(face_detector.empty())\r\n                    {\r\n                        face_detector = null;\r\n                    }\r\n                    else\r\n                        cascadeDir.delete();\r\n                    javaCameraView.enableView();\r\n                }\r\n                break;\r\n                default: {\r\n                    super.onManagerConnected(status);\r\n                    break;\r\n                }\r\n            }\r\n\r\n        }\r\n    };\r\n\r\n\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_face_recognition);\r\n        javaCameraView=(JavaCameraView)findViewById(R.id.my_camera_view);\r\n        javaCameraView.setCvCameraViewListener(this);\r\n        javaCameraView.setCameraIndex(2);\r\n       // javaCameraView.setRotation(90);\r\n\r\n\r\n        /*\r\n        if(!OpenCVLoader.initDebug()) {\r\n            OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION,this, baseCallback);\r\n\r\n        } else {\r\n            Log.i(TAG, \"not good\");\r\n        }\r\n\r\n         */\r\n\r\n        /*javaCameraView=(JavaCameraView)findViewById(R.id.my_camera_view);\r\n        javaCameraView.setVisibility(SurfaceView.VISIBLE);\r\n        javaCameraView.setCvCameraViewListener(Face_Recognition.this);\r\n        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);\r\n        new ObjectDetection().run(new String[]{\"src/main/assets/haarcascade_frontalface_default.xml\", \"src/main/assets/haarcascade_eye.xml\"});\r\n         */\r\n    }\r\n\r\n    @Override\r\n    public void onCameraViewStarted(int width, int height) {\r\n        mRGBA= new Mat();\r\n        mGREY = new Mat();\r\n    }\r\n\r\n    @Override\r\n    public void onCameraViewStopped() {\r\n        mRGBA.release();\r\n        mGREY.release();\r\n\r\n    }\r\n\r\n    @Override\r\n    public Mat onCameraFrame(CameraBridgeViewBase.CvCameraViewFrame inputFrame) {\r\n\r\n        mRGBA= inputFrame.rgba();\r\n        //Core.rotate(mRGBA, mRGBA.t(),Core.ROTATE_90_COUNTERCLOCKWISE);\r\n        mGREY = inputFrame.gray();\r\n        //Core.rotate(mGREY, mGREY.t(),Core.ROTATE_90_COUNTERCLOCKWISE);\r\n\r\n        MatOfRect faceDetections = new MatOfRect();\r\n        face_detector.detectMultiScale(mGREY,faceDetections);\r\n        for(Rect rect: faceDetections.toArray())\r\n        {\r\n            Imgproc.rectangle(mRGBA,new Point(rect.x,rect.y),\r\n                    new Point(rect.x + rect.width, rect.y + rect.height),\r\n                    new Scalar(255,0,0));\r\n        }\r\n\r\n        return mRGBA;\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n        if(javaCameraView != null)\r\n        {\r\n            javaCameraView.disableView();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n        if(javaCameraView != null)\r\n        {\r\n            javaCameraView.disableView();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n\r\n            if(OpenCVLoader.initDebug()) {\r\n                Log.i(TAG,\"good\");\r\n                try {\r\n                    baseLoaderCallback.onManagerConnected(BaseLoaderCallback.SUCCESS);\r\n                } catch (IOException e) {\r\n                    e.printStackTrace();\r\n                }\r\n\r\n            } else {\r\n                Log.i(TAG, \"not good\");\r\n                OpenCVLoader.initAsync(OpenCVLoader.OPENCV_VERSION,this, baseLoaderCallback);\r\n            }\r\n        }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/final_project_amit_and_gal/Face_Recognition.java	(revision be3943d44d05c0e12d9a7030858d115ebe6397c9)
+++ app/src/main/java/com/example/final_project_amit_and_gal/Face_Recognition.java	(date 1623311315378)
@@ -82,8 +82,7 @@
         javaCameraView=(JavaCameraView)findViewById(R.id.my_camera_view);
         javaCameraView.setCvCameraViewListener(this);
         javaCameraView.setCameraIndex(2);
-       // javaCameraView.setRotation(90);
-
+        //javaCameraView.setMaxFrameSize(500,500);
 
         /*
         if(!OpenCVLoader.initDebug()) {
@@ -118,11 +117,12 @@
 
     @Override
     public Mat onCameraFrame(CameraBridgeViewBase.CvCameraViewFrame inputFrame) {
-
         mRGBA= inputFrame.rgba();
-        //Core.rotate(mRGBA, mRGBA.t(),Core.ROTATE_90_COUNTERCLOCKWISE);
+
         mGREY = inputFrame.gray();
-        //Core.rotate(mGREY, mGREY.t(),Core.ROTATE_90_COUNTERCLOCKWISE);
+        Core.flip(mRGBA.t(), mRGBA, -1);
+        Core.flip(mGREY.t(), mGREY, -1);
+        Log.i("MYMAT", String.valueOf(mRGBA.dims()));
 
         MatOfRect faceDetections = new MatOfRect();
         face_detector.detectMultiScale(mGREY,faceDetections);
Index: app/src/main/java/com/example/final_project_amit_and_gal/Face_Recognition.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.final_project_amit_and_gal\r\n\r\nimport android.Manifest\r\nimport android.content.Context\r\nimport android.content.pm.PackageManager\r\nimport android.hardware.Camera\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.widget.FrameLayout\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.app.ActivityCompat\r\n\r\nimport androidx.core.content.ContextCompat\r\nimport com.chaquo.python.Python\r\nimport com.chaquo.python.android.AndroidPlatform\r\n\r\n\r\nclass Face_Recognition : AppCompatActivity() {\r\n    /*private val PERMISSION_REQUEST_CODE = 200\r\n    private var mCamera: Camera? = null\r\n    private var mPreview: CameraPreview? = null\r\n\r\n\r\n     */\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_face_recognition)\r\n\r\n        initPython()\r\n        Log.i(\"Python\", getPythonHelloWorld())\r\n    }\r\n\r\n    private fun getPythonHelloWorld(): String {\r\n        val python = Python.getInstance()\r\n        val pythonFile = python.getModule(\"face_proj/face_app\")\r\n        return pythonFile.callAttr(\"face_reco\").toString()\r\n    }\r\n\r\n    private fun initPython() {\r\n        if (!Python.isStarted()) {\r\n            Python.start(AndroidPlatform(this))\r\n        }\r\n    }\r\n}\r\n\r\n/*\r\n        // Create an instance of Camera\r\n        mCamera = getCameraInstance()\r\n\r\n        mPreview = mCamera?.let {\r\n            // Create our Preview view\r\n            CameraPreview(this, it)\r\n        }\r\n\r\n        // Set the Preview view as the content of our activity.\r\n        mPreview?.also {\r\n            val preview: FrameLayout = findViewById(R.id.camera_preview)\r\n            preview.addView(it)\r\n        }\r\n\r\n        Log.i(\"FACE RECO\", \"START\")\r\n    }\r\n\r\n\r\n\r\n    /** Check if this device has a camera */\r\n    private fun checkCameraHardware(context: Context): Boolean {\r\n        if (context.packageManager.hasSystemFeature(PackageManager.FEATURE_CAMERA)) {\r\n            // this device has a camera\r\n            return true\r\n        } else {\r\n            // no camera on this device\r\n            return false\r\n        }\r\n    }\r\n\r\n    /** A safe way to get an instance of the Camera object. */\r\n    fun getCameraInstance(): Camera? {\r\n        return try {\r\n            openFrontFacingCamera() // attempt to get a Camera instance\r\n        } catch (e: Exception) {\r\n            // Camera is not available (in use or does not exist)\r\n            null // returns null if camera is unavailable\r\n        }\r\n    }\r\n\r\n    private fun openFrontFacingCamera(): Camera? {\r\n        var cameraCount = 0\r\n        var cam: Camera? = null\r\n        val cameraInfo = Camera.CameraInfo()\r\n        cameraCount = Camera.getNumberOfCameras()\r\n        Log.i(\"TAG\", cameraCount.toString())\r\n        for (camIdx in 0 until cameraCount) {\r\n            Camera.getCameraInfo(camIdx, cameraInfo)\r\n            if (cameraInfo.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {\r\n                try {\r\n                    if (!checkPermission()) {\r\n                        requestPermission()\r\n                    }\r\n                    cam = Camera.open(camIdx)\r\n                } catch (e: RuntimeException) {\r\n                    Log.e(\"TAG\", \"Camera failed to open: \" + e.localizedMessage)\r\n                }\r\n            }\r\n        }\r\n        return cam\r\n    }\r\n\r\n    private fun checkPermission(): Boolean {\r\n        return if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA)\r\n            != PackageManager.PERMISSION_GRANTED\r\n        ) {\r\n            // Permission is not granted\r\n            false\r\n        } else true\r\n    }\r\n\r\n    private fun requestPermission() {\r\n        ActivityCompat.requestPermissions(\r\n            this, arrayOf(Manifest.permission.CAMERA),PERMISSION_REQUEST_CODE\r\n        )\r\n    }\r\n\r\n}\r\n\r\n */
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/final_project_amit_and_gal/Face_Recognition.kt	(revision be3943d44d05c0e12d9a7030858d115ebe6397c9)
+++ app/src/main/java/com/example/final_project_amit_and_gal/Face_Recognition.kt	(date 1623258356168)
@@ -1,5 +1,5 @@
 package com.example.final_project_amit_and_gal
-
+/*
 import android.Manifest
 import android.content.Context
 import android.content.pm.PackageManager
